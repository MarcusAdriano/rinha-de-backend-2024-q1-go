// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO transactions 
(user_id, description, amount, ttype) 
VALUES ($1, $2, $3, $4)
`

type CreateTransactionParams struct {
	UserID      int32
	Description string
	Amount      int64
	Ttype       string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.Exec(ctx, createTransaction,
		arg.UserID,
		arg.Description,
		arg.Amount,
		arg.Ttype,
	)
	return err
}

const getTransactionsByUser = `-- name: GetTransactionsByUser :many
SELECT t.description, t.amount, t.created_at, t.ttype
FROM transactions t
WHERE user_id = $1 ORDER BY created_at DESC LIMIT $2
`

type GetTransactionsByUserParams struct {
	UserID int32
	Limit  int32
}

type GetTransactionsByUserRow struct {
	Description string
	Amount      int64
	CreatedAt   pgtype.Timestamp
	Ttype       string
}

func (q *Queries) GetTransactionsByUser(ctx context.Context, arg GetTransactionsByUserParams) ([]GetTransactionsByUserRow, error) {
	rows, err := q.db.Query(ctx, getTransactionsByUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionsByUserRow
	for rows.Next() {
		var i GetTransactionsByUserRow
		if err := rows.Scan(
			&i.Description,
			&i.Amount,
			&i.CreatedAt,
			&i.Ttype,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, balance, balance_limit 
FROM users 
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Balance, &i.BalanceLimit)
	return i, err
}

const updateUserBalance = `-- name: UpdateUserBalance :one
UPDATE users 
SET balance = balance + $1 
WHERE id = $2 RETURNING balance, balance_limit
`

type UpdateUserBalanceParams struct {
	Balance int64
	ID      int32
}

type UpdateUserBalanceRow struct {
	Balance      int64
	BalanceLimit int64
}

func (q *Queries) UpdateUserBalance(ctx context.Context, arg UpdateUserBalanceParams) (UpdateUserBalanceRow, error) {
	row := q.db.QueryRow(ctx, updateUserBalance, arg.Balance, arg.ID)
	var i UpdateUserBalanceRow
	err := row.Scan(&i.Balance, &i.BalanceLimit)
	return i, err
}
